<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
<bean id="customLogoutSuccess" class="org.zerock.sercurity.CustomLogoutSuccessHandler"></bean>		
<bean id="customLoginSuccess" class="org.zerock.sercurity.CustomLoginSuccessHandler"></bean>
<bean id="customAccessDenied" class="org.zerock.sercurity.CustomAccessDeniedHandler"></bean>
<security:http>
	<security:intercept-url pattern="/sample/all" access="permitAll"/>
	
	<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
	<!-- hasRole('') <= 표현식 -->
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
	
	<!--  <security:form-login/> --><!-- spring 기본 제공 login 페이지 사용(only for test) -->
	<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/> <!-- custom login page, login success시 요청 직접 처리  customLoginSuccess : bean -->
	<!-- 에러 발생시 error 파라미터에 빈문자열 리턴(/customLogin?error) -->
	
	<!--  <security:access-denied-handler error-page="/accessError" /> --> <!-- 단순히 에러페이지 띄우기 -->
	<security:access-denied-handler ref="customAccessDenied" /> <!-- 요청 직접 처리  customAccessDenied : bean -->
	
	<!--  <security:logout logout-url="/customLogout" invalidate-session="true"/>--> <!-- 가장 간단한 버전  -->
	<!-- 로그아웃 성공시 로그인 페이지로 이동 후 logout 파라미터에 빈문자열 리턴(/customLogin?logout) -->
	
	<!--  <security:logout logout-url="/customLogout" logout-success-url="/"  invalidate-session="true"/> -->
	<!-- 로그아웃 성공시 메인 페이지로 이동, 로그아웃 파라미터 x -->
	
	<security:logout logout-url="/customLogout" success-handler-ref="customLogoutSuccess"  invalidate-session="true"/>
	<!-- 로그아웃 성공시 핸들러 호출-->
	
</security:http>

<security:authentication-manager>
	<security:authentication-provider>
		<security:user-service>
			<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
			<!-- security:user <= userServiceInterface ; user id,pw,권한 지정 후 로그인 로직 처리 후 인가 -->
			<!-- spring security 5.0 이후로 passwordEncoder 필요함  -> {noop}: 인코더 지정안한다는 의미 -->
			<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
		</security:user-service>
	</security:authentication-provider>
</security:authentication-manager>

</beans>
